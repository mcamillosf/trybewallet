{"version":3,"sources":["components/Header.jsx","components/InputWallet.jsx","components/LoginInput.jsx","components/PasswordInput.jsx","components/Payment.jsx","components/SelectCoin.jsx","components/TagSelect.jsx","components/WalletTable.jsx","actions/index.js","pages/Login.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/store.jsx","index.js"],"names":["Header","this","props","user","expenses","email","total","reduce","acc","curr","ask","exchangeRates","currency","Number","value","data-testid","toFixed","id","Component","connect","state","wallet","InputWallet","htmlFor","type","name","LoginInput","func","login","className","placeholder","onChange","PasswordInput","pass","Payment","SelectCoin","currencies","anything","Object","keys","filter","currencie","map","each","key","defaultProps","TagSelect","WalletTable","handleClick","bind","param","deleteEach","description","tag","method","onClick","dispatch","deleteItem","Login","password","loginValid","passwordValid","validateLogin","validatePassword","handleSubmit","target","setState","test","length","e","preventDefault","history","dispatchValue","push","action","disabled","ValueAndName","Wallet","count","getAPI","document","querySelector","amount","a","status","fetch","response","json","data","setExpense","App","basename","process","exact","path","component","Boolean","window","location","hostname","match","users","wallets","statues","index","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","Provider","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3e1c47fb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    const { user, expenses } = this.props;\r\n    const { email } = user;\r\n\r\n    // Feito com ajuda do Rogério\r\n\r\n    const total = expenses.reduce((acc, curr) => {\r\n      const { ask } = curr.exchangeRates[curr.currency];\r\n      return acc + Number(curr.value * ask);\r\n    }, 0);\r\n\r\n    return (\r\n      <header>\r\n        <h4>Carteira Digital</h4>\r\n        <span data-testid=\"email-field\">{ email }</span>\r\n        <div>\r\n          <span data-testid=\"total-field\">{ total.toFixed(2) }</span>\r\n          <span data-testid=\"header-currency-field\" id=\"coin\">BRL</span>\r\n        </div>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  user: state.user,\r\n  expenses: state.wallet.expenses,\r\n});\r\n\r\nHeader.propTypes = {\r\n  user: PropTypes.arrayOf(),\r\n}.isRequired;\r\n\r\nexport default connect(mapStateToProps)(Header);\r\n","import React, { Component } from 'react';\r\n\r\nclass InputWallet extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <label htmlFor=\"valor\">\r\n          Valor\r\n          <input type=\"text\" name=\"valor\" id=\"valor\" />\r\n        </label>\r\n        <label htmlFor=\"descricao\">\r\n          Descrição\r\n          <input type=\"text\" name=\"descricao\" id=\"descricao\" />\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputWallet;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass LoginInput extends Component {\r\n  render() {\r\n    const { func, login } = this.props;\r\n\r\n    return (\r\n      <div className=\"login-input\">\r\n        <label htmlFor=\"login\">\r\n          <input\r\n            type=\"text\"\r\n            id=\"login\"\r\n            className=\"log-inp\"\r\n            placeholder=\"LOGIN\"\r\n            name=\"email\"\r\n            value={ login }\r\n            data-testid=\"email-input\"\r\n            onChange={ func }\r\n          />\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nLoginInput.propTypes = {\r\n  func: PropTypes.func,\r\n  login: PropTypes.string,\r\n}.isRequired;\r\n\r\nexport default LoginInput;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass PasswordInput extends Component {\r\n  render() {\r\n    const { func, pass } = this.props;\r\n\r\n    return (\r\n      <div className=\"password-input\">\r\n        <label htmlFor=\"password\">\r\n          <input\r\n            type=\"password\"\r\n            id=\"password\"\r\n            className=\"pass-inp\"\r\n            name=\"password\"\r\n            placeholder=\"PASSWORD\"\r\n            value={ pass }\r\n            data-testid=\"password-input\"\r\n            onChange={ func }\r\n          />\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPasswordInput.propTypes = {\r\n  func: PropTypes.func,\r\n  pass: PropTypes.string,\r\n}.isRequired;\r\n\r\nexport default PasswordInput;\r\n","import React, { Component } from 'react';\r\n\r\nclass Payment extends Component {\r\n  render() {\r\n    return (\r\n      <label htmlFor=\"payment\">\r\n        Método de pagamento:\r\n        <select name=\"payment\" id=\"payment\">\r\n          <option>Dinheiro</option>\r\n          <option>Cartão de crédito</option>\r\n          <option>Cartão de débito</option>\r\n        </select>\r\n      </label>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Payment;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass SelectCoin extends Component {\r\n  render() {\r\n    const { currencies } = this.props;\r\n    const anything = Object.keys(currencies)\r\n      .filter((currencie) => currencie !== 'USDT');\r\n    return (\r\n      <label htmlFor=\"currency\">\r\n        Moeda:\r\n        <select name=\"currency\" id=\"currency\">\r\n          {anything.map(\r\n            (each) => <option key={ each }>{ each }</option>,\r\n          )}\r\n        </select>\r\n      </label>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  currencies: state.wallet.currencies[0],\r\n});\r\n\r\nSelectCoin.propTypes = {\r\n  currencies: PropTypes.arrayOf(),\r\n}.isRequired;\r\n\r\nSelectCoin.defaultProps = {\r\n  currencies: {},\r\n};\r\n\r\nexport default connect(mapStateToProps)(SelectCoin);\r\n","import React, { Component } from 'react';\r\n\r\nclass TagSelect extends Component {\r\n  render() {\r\n    return (\r\n      <label htmlFor=\"tags\">\r\n        Tag:\r\n        <select id=\"tags\">\r\n          <option>Alimentação</option>\r\n          <option>Lazer</option>\r\n          <option>Trabalho</option>\r\n          <option>Transporte</option>\r\n          <option>Saúde</option>\r\n        </select>\r\n      </label>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TagSelect;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { deleteItem } from '../actions';\r\n\r\nclass WalletTable extends Component {\r\n  constructor() {\r\n    super();\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick(param) {\r\n    const { deleteEach } = this.props;\r\n    deleteEach(param);\r\n  }\r\n\r\n  render() {\r\n    const { expenses } = this.props;\r\n    return (\r\n      <table className=\"table-wallet\">\r\n        <thead>\r\n          <tr>\r\n            <th>Descrição</th>\r\n            <th>Tag</th>\r\n            <th>Método de pagamento</th>\r\n            <th>Valor</th>\r\n            <th>Moeda</th>\r\n            <th>Câmbio utilizado</th>\r\n            <th>Valor convertido</th>\r\n            <th>Moeda de conversão</th>\r\n            <th>Editar/Excluir</th>\r\n          </tr>\r\n        </thead>\r\n\r\n        {/* Rogério deu a moral de como fazer esse map com o table. */}\r\n        <tbody>\r\n          {expenses.map((each) => (\r\n            <tr key={ each.id }>\r\n              <td>{each.description}</td>\r\n              <td>{each.tag}</td>\r\n              <td>{each.method}</td>\r\n              <td>{each.value}</td>\r\n              <td>{each.exchangeRates[each.currency].name}</td>\r\n              <td>{(each.exchangeRates[each.currency].ask * 1).toFixed(2)}</td>\r\n              <td>{(each.exchangeRates[each.currency].ask * each.value).toFixed(2)}</td>\r\n              <td>Real</td>\r\n              <td>\r\n                <button type=\"submit\">Editar</button>\r\n                <button\r\n                  data-testid=\"delete-btn\"\r\n                  type=\"submit\"\r\n                  onClick={ () => this.handleClick(each.id) }\r\n                >\r\n                  Excluir\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  expenses: state.wallet.expenses,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  deleteEach: (state) => dispatch(deleteItem(state)),\r\n});\r\n\r\nWalletTable.propTypes = {\r\n  deleteEach: PropTypes.func,\r\n  expenses: PropTypes.arrayOf(),\r\n}.isRequired;\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WalletTable);\r\n","export const SET_USER = 'SET_USER';\r\nexport const SET_WALLET = 'SET_WALLET';\r\nexport const REQUEST_FAIL = 'REQUEST_FAIL';\r\nexport const SET_EXPENSE = 'SET_EXPENSE';\r\nexport const REQUEST_API = 'REQUEST_API';\r\nexport const GET_CURRENCY = 'GET_CURRENCY';\r\nexport const DELETE_ITEM = 'DELETE_ITEM';\r\n\r\nexport const setUser = (state) => ({\r\n  type: SET_USER, state,\r\n});\r\n\r\nexport const setWallet = (state) => ({\r\n  type: SET_WALLET, state,\r\n});\r\n\r\nexport const setExpense = (state) => ({\r\n  type: SET_EXPENSE, state,\r\n});\r\n\r\n// ========== // ============= // ============= //\r\n\r\nexport const deleteItem = (state) => ({\r\n  type: DELETE_ITEM, state,\r\n});\r\n\r\n// Requisição da API feita com ajuda do Rogério.\r\n\r\nexport const requestAPI = () => ({\r\n  type: REQUEST_API, status: 'loading',\r\n});\r\n\r\nexport const getCurrency = (state) => ({\r\n  type: GET_CURRENCY, state,\r\n});\r\n\r\nexport const requestFail = () => ({\r\n  type: REQUEST_FAIL, status: 'Fail Request',\r\n});\r\n\r\nexport const fetchAPI = () => async (dispatch) => {\r\n  try {\r\n    dispatch(requestAPI());\r\n    const response = await fetch('https://economia.awesomeapi.com.br/json/all');\r\n    const data = await response.json();\r\n    return dispatch(getCurrency(data));\r\n  } catch (error) {\r\n    return dispatch(requestFail());\r\n  }\r\n};\r\n","import React, { Component } from 'react';\r\nimport './login.css';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { setUser } from '../actions';\r\nimport { LoginInput, PasswordInput } from '../components';\r\n\r\nclass Login extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      email: '',\r\n      password: '',\r\n      loginValid: false,\r\n      passwordValid: false,\r\n    };\r\n    this.validateLogin = this.validateLogin.bind(this);\r\n    this.validatePassword = this.validatePassword.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  validateLogin({ target }) {\r\n    const { name, value } = target;\r\n    const isValid = /^([\\w.%+-]+)@([\\w-]+.)+([\\w]{2,})$/i;\r\n    this.setState({ [name]: value });\r\n    if (isValid.test(value)) {\r\n      return this.setState({ loginValid: true });\r\n    }\r\n    return this.setState({ loginValid: false });\r\n  }\r\n\r\n  validatePassword({ target }) {\r\n    const { name, value } = target;\r\n    const MIN_SIZE = 6;\r\n    this.setState({ [name]: value });\r\n    if (value.length >= MIN_SIZE) {\r\n      return this.setState({ passwordValid: true });\r\n    }\r\n    return this.setState({ passwordValid: false });\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n    const { history, dispatchValue } = this.props;\r\n    dispatchValue(this.state);\r\n    history.push('/carteira');\r\n  }\r\n\r\n  render() {\r\n    const { loginValid, passwordValid, email, password } = this.state;\r\n\r\n    return (\r\n      <main className=\"login-screen\">\r\n        <form action=\"\" className=\"login-form\">\r\n          <LoginInput func={ this.validateLogin } login={ email } />\r\n          <PasswordInput func={ this.validatePassword } pass={ password } />\r\n          <button\r\n            type=\"submit\"\r\n            className=\"btn-form\"\r\n            disabled={ !loginValid || !passwordValid }\r\n            onClick={ this.handleSubmit }\r\n          >\r\n            Entrar\r\n          </button>\r\n        </form>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  dispatchValue: (ValueAndName) => dispatch(setUser(ValueAndName)),\r\n});\r\n\r\nLogin.propTypes = {\r\n  history: PropTypes.arrayOf(Object),\r\n  dispatchValue: PropTypes.func,\r\n}.isRequired;\r\n\r\nexport default connect(null, mapDispatchToProps)(Login);\r\n","import React, { Component } from 'react';\r\nimport './wallet.css';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { InputWallet, SelectCoin, Payment, Header,\r\n  TagSelect, WalletTable } from '../components';\r\nimport { fetchAPI, setExpense } from '../actions';\r\n\r\nclass Wallet extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.count = 0;\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { getAPI } = this.props;\r\n    getAPI();\r\n  }\r\n\r\n  // Feito com ajuda do Rogério.\r\n\r\n  handleClick(e) {\r\n    e.preventDefault();\r\n    const { getAPI, expenses } = this.props;\r\n    getAPI();\r\n    const { currencies } = this.props;\r\n    const { value } = document.querySelector('#valor');\r\n    const description = document.querySelector('#descricao').value;\r\n    const currency = document.querySelector('#currency').value;\r\n    const method = document.querySelector('#payment').value;\r\n    const tag = document.querySelector('#tags').value;\r\n\r\n    expenses({\r\n      id: this.count,\r\n      value,\r\n      description,\r\n      currency,\r\n      method,\r\n      tag,\r\n      exchangeRates: currencies,\r\n    });\r\n    this.count += 1;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <main>\r\n        <Header />\r\n        <form className=\"form-wallet\">\r\n          <InputWallet />\r\n          <SelectCoin />\r\n          <Payment />\r\n          <TagSelect />\r\n          <button type=\"submit\" onClick={ this.handleClick }>Adicionar despesa</button>\r\n        </form>\r\n        <WalletTable />\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getAPI: () => dispatch(fetchAPI()),\r\n  expenses: (state) => dispatch(setExpense(state)),\r\n});\r\n\r\nconst mapStateToProps = (state) => ({\r\n  currencies: state.wallet.currencies[0],\r\n  amount: state.wallet.amount,\r\n});\r\n\r\nWallet.propTypes = {\r\n  getAPI: PropTypes.func,\r\n}.isRequired;\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\r\n","import React from 'react';\r\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport { Login, Wallet } from './pages';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router basename={ process.env.PUBLIC_URL }>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={ Login } />\r\n        <Route exact path=\"/carteira\" component={ Wallet } />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { SET_USER } from '../actions';\r\n\r\nconst users = {\r\n  email: '',\r\n  password: '',\r\n  loginValid: '',\r\n  passwordValid: '',\r\n};\r\n\r\nconst user = (state = users, action) => {\r\n  switch (action.type) {\r\n  case SET_USER:\r\n    return { ...state, ...action.state };\r\n  default:\r\n    return state;\r\n  }\r\n};\r\n\r\nexport default user;\r\n","import { SET_WALLET, REQUEST_API, GET_CURRENCY,\r\n  SET_EXPENSE, REQUEST_FAIL, DELETE_ITEM } from '../actions';\r\n\r\nconst wallets = {\r\n  currencies: [],\r\n  expenses: [],\r\n};\r\n\r\n// Feito com ajuda do Rogério.\r\n\r\nconst wallet = (state = wallets, action) => {\r\n  switch (action.type) {\r\n  case SET_WALLET:\r\n    return { ...state, ...action.state };\r\n  case REQUEST_API:\r\n    return { ...state, ...action.state };\r\n  case GET_CURRENCY:\r\n    return { ...state, currencies: [{ ...action.state }] };\r\n  case SET_EXPENSE:\r\n    return { ...state, expenses: [...state.expenses, action.state] };\r\n  case REQUEST_FAIL:\r\n    return { ...state, statues: action.status };\r\n  case DELETE_ITEM:\r\n    return { ...state,\r\n      expenses: [...state.expenses.filter(\r\n        (index) => index.id !== action.state,\r\n      )] };\r\n  default:\r\n    return state;\r\n  }\r\n};\r\n\r\nexport default wallet;\r\n","import { combineReducers } from 'redux';\r\nimport user from './user';\r\nimport wallet from './wallet';\r\n\r\n// Configure os seus reducers.\r\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\r\n\r\nconst rootReducer = combineReducers({ user, wallet });\r\n\r\nexport default rootReducer;\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from '../reducers';\r\n\r\nconst store = createStore(rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport Provider from 'react-redux/es/components/Provider';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from './store/store';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <Provider store={ store }>\r\n      <App />\r\n    </Provider>\r\n  </BrowserRouter>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}